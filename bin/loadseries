#!/usr/bin/env perl

use strict;
use utf8;
use warnings;
use Getopt::Long;
use Config::General;
use CIHM::Meta::REST::internalmeta;
use CIHM::Meta::REST::access;
use CIHM::Meta::Kivik;
use XML::LibXML;
use CIHM::Swift::Client;
use Data::Dumper;
use JSON;
use DateTime;
use List::Compare;
use Digest::MD5 qw(md5 md5_hex md5_base64);

{

    package restclient;

    use Moo;
    with 'Role::REST::Client';
}

my $conf = "/etc/canadiana/tdr/tdr.conf";
my $nocapcol;
my $noseries;
my $nopost;
my $nomanifests;
my $noupdatedmd;
my $validate;
my $checktags;
my $clearmembers;
my $debug;

GetOptions(
    'conf:s'       => \$conf,
    'nocapcol'     => \$nocapcol,
    'noseries'     => \$noseries,
    'nopost'       => \$nopost,
    'nomanifests'  => \$nomanifests,
    'noupdatedmd'  => \$noupdatedmd,
    'validate'     => \$validate,
    'checktags'    => \$checktags,
    'clearmembers' => \$clearmembers,
    'debug'        => \$debug
);

my %confighash = new Config::General( -ConfigFile => $conf, )->getall;

die "missing noid= in configuration\n" if ( !exists $confighash{noid} );

my $noidsrv = new restclient(
    server      => $confighash{noid},
    type        => 'application/json',
    clientattrs => { timeout => 3600 }
);
die "Failed to create noid client\n" if ( !$noidsrv );
my $res = $noidsrv->get( "/", {}, { deserializer => 'application/json' } );
if ( $res->code != 200 ) {
    die "noid server setup return code: " . $res->code . "\n";
}

# Array of already allocated collection noids
my @colNoids;

# Undefined if no <swift> config block
my $swift;
my $preservation_files;
my $access_metadata;
my $access_files;
if ( exists $confighash{swift} ) {
    my %swiftopt = ( furl_options => { timeout => 120 } );
    foreach ( "server", "user", "password", "account", "furl_options" ) {
        if ( exists $confighash{swift}{$_} ) {
            $swiftopt{$_} = $confighash{swift}{$_};
        }
    }
    $swift              = CIHM::Swift::Client->new(%swiftopt);
    $preservation_files = $confighash{swift}{container};
    $access_metadata    = $confighash{swift}{access_metadata};
    $access_files       = $confighash{swift}{access_files};
}
else {
    die "No <swift> configuration block in $conf\n";
}

# Undefined if no <cap_collection> config block
my $cap_collections;
if ( exists $confighash{cap_collections} ) {
    $cap_collections = new restclient(
        server => $confighash{cap_collections}{server} . "/"
          . $confighash{cap_collections}{database},
        type        => 'application/json',
        clientattrs => { timeout => 3600 },
    );
    $cap_collections->set_persistent_header( 'Accept' => 'application/json' );
}
else {
    die "Missing <cap_collections> configuration block in config\n";
}

# Undefined if no <internalmeta> config block
my $internalmeta;
if ( exists $confighash{internalmeta} ) {
    $internalmeta = new CIHM::Meta::REST::internalmeta(
        server      => $confighash{internalmeta}{server},
        database    => $confighash{internalmeta}{database},
        type        => 'application/json',
        conf        => $conf,
        clientattrs => { timeout => 3600 },
    );
}
else {
    die "Missing <internalmeta> configuration block in config\n";
}

=pod

my @online = getMemberSlugs("online");

my @monog   = getMemberSlugs("monog");
my @serials = getMemberSlugs("serials");
my @govpubs = getMemberSlugs("govpubs");

my @per    = getMemberSlugs("per");
my @annual = getMemberSlugs("annual");
my @news   = getMemberSlugs("news");

my $lc =
  List::Compare->new( \@online, \@monog, \@serials, \@govpubs, \@per, \@annual,
    \@news );

my @uonline = $lc->get_unique(0);

$lc = List::Compare->new( \@serials, \@per, \@annual, \@news );

my @userials = $lc->get_unique(0);

print Data::Dumper->Dump( [ \@uonline, \@userials ], [qw(online serials)] );

exit 0;
=cut

# cap_collections sourced collections
print "Load cap_collections...\n";
my %capcols;
if ( !$nocapcol ) {
    $res = $cap_collections->get( "/_all_docs?include_docs=true",
        {}, { deserializer => 'application/json' } );
    if ( $res->code != 200 ) {
        die "doctype return code: " . $res->code . "\n";
    }
    foreach my $collection ( @{ $res->data->{rows} } ) {
        $capcols{ $collection->{id} } = {

            # cap_collection labels are already IIIF Text Values
            label          => $collection->{doc}->{label},
            summary        => $collection->{doc}->{summary},
            subcollections => $collection->{doc}->{subcollections}
        };
    }
}

# Undefined if no <access> config block
my $accessdb;
if ( exists $confighash{access} ) {
    $accessdb = new CIHM::Meta::REST::access(
        server      => $confighash{access}{server},
        database    => $confighash{access}{database},
        type        => 'application/json',
        conf        => $conf,
        clientattrs => { timeout => 36000 },
    );
}
else {
    die "Missing <access> configuration block in config\n";
}

# Hash by slug id from 'internalmeta' series records
my %seriesslugs;
if ( !$noseries ) {
    print "Loading series slugs from 'internalmeta'...\n";
    $internalmeta->type("application/json");
    my $key = "\"approved\",\"aip\",\"series\"";
    $res = $internalmeta->get(
        "/"
          . $internalmeta->{database}
          . "/_design/tdr/_view/doctype?reduce=false&include_docs=true&startkey=[$key]&endkey=[$key,{}]",
        {},
        { deserializer => 'application/json' }
    );
    if ( $res->code != 200 ) {
        die "doctype return code: " . $res->code . "\n";
    }
    foreach my $seriesslug ( @{ $res->data->{rows} } ) {

        # Convert string label to Text Value
        my %label = ( "none" => $seriesslug->{doc}->{label} );
        $seriesslugs{ $seriesslug->{id} } = {
            collections => $seriesslug->{doc}->{collections},
            label       => \%label
        };
    }

    $key = "\"not%20approved\",\"aip\",\"series\"";
    $res = $internalmeta->get(
        "/"
          . $internalmeta->{database}
          . "/_design/tdr/_view/doctype?reduce=false&include_docs=true&startkey=[$key]&endkey=[$key,{}]",
        {},
        { deserializer => 'application/json' }
    );
    if ( $res->code != 200 ) {
        die "doctype return code: " . $res->code . "\n";
    }
    foreach my $seriesslug ( @{ $res->data->{rows} } ) {

        # Convert string label to IIIF Text Value
        my %label = ( "none" => $seriesslug->{doc}->{label} );
        $seriesslugs{ $seriesslug->{id} } = {
            collections => $seriesslug->{doc}->{collections},
            label       => \%label
        };
    }
}
else {
    print "Not loading series from internalmeta\n";
}

# Building the collections

## Load existing 'slug' entries
print "Load slugs...\n";
my %slugfromnoid;
my %noidfromslug;
my $url = "/" . $accessdb->database . "/_find";
my $donenoid;
my $bookmarknoid;
my @collectionlist;

while ( !$donenoid ) {
    $res = $accessdb->post(
        $url,
        {
            "selector" => {},
            "limit"    => 100000,
            "fields"   => [ "_id", "type", "slug" ],
            "bookmark" => $bookmarknoid
        },
        { deserializer => 'application/json' }
    );
    if ( $res->code != 200 ) {
        if ( defined $res->response->content ) {
            warn $res->response->content . "\n";
        }
        die "$url return code: " . $res->code . "\n";
    }
    if ( exists $res->data->{bookmark} ) {
        $bookmarknoid = $res->data->{bookmark};
    }
    if ( exists $res->data->{docs} ) {
        if ( scalar( @{ $res->data->{docs} } ) ) {
            foreach my $slugentry ( @{ $res->data->{docs} } ) {
                if ( defined $slugentry->{'slug'}
                    && ( substr( $slugentry->{'_id'}, 0, 8 ) ne '_design/' ) )
                {
                    $noidfromslug{ $slugentry->{'slug'} } = $slugentry->{'_id'};
                }
                if ( $slugentry->{'type'} eq 'collection' ) {
                    push @collectionlist, $slugentry->{'_id'};
                }
            }
        }
        else {
            $donenoid = JSON::true;

        }
    }
}

## Load existing 'collection' entries
print "Load existing 'collection' entries...\n";
my %collectionentries;

# Only get collections using ID's from above.
$url = "/" . $accessdb->database . "/_all_docs?include_docs=true";
$res = $accessdb->post(
    $url,
    {
        keys => \@collectionlist

    },
    { deserializer => 'application/json' }
);
if ( $res->code != 200 ) {
    if ( defined $res->response->content ) {
        warn $res->response->content . "\n";
    }
    die "collection/_all_docs return code: " . $res->code . "\n";
}
foreach my $collection ( @{ $res->data->{rows} } ) {
    if ( substr( $collection->{key}, 0, 8 ) ne '_design/' ) {
        my $noid = $collection->{key};
        my $slug = $collection->{doc}->{slug};
        %{ $collectionentries{$noid} } = %{ $collection->{doc} };

        if ( defined $collection->{doc}->{slug}
            && ( $noidfromslug{ $collection->{doc}->{slug} } ne $noid ) )
        {
            print "NOID mismatch? " . Dumper($collection) . "\n";
        }

        if ( scalar( @{ $collectionentries{$noid}{members} } )
            && ref @{ $collectionentries{$noid}{members} }[0] ne 'HASH' )
        {
            @{ $collectionentries{$noid}{members} } =
              listToId( @{ $collectionentries{$noid}{members} } );
            $collectionentries{$noid}{updated} = 1;
        }
    }
}

# Add in any missing collections from cap_collections
print "Add any missing cap collections...\n";
foreach my $capcol ( keys %capcols ) {
    findCreateCollection(
        {
            slug    => $capcol,
            label   => $capcols{$capcol}{'label'},
            summary => $capcols{$capcol}{'summary'},
            ordered => 0
        }
    );
}

# Parentcollection stays in slugland
my %parentcollection;
foreach my $capcol ( keys %capcols ) {
    if ( defined $capcols{$capcol}{'subcollections'} ) {
        if ( ref( $capcols{$capcol}{'subcollections'} ) eq ref [] ) {
            my @members;

            foreach my $subcol ( @{ $capcols{$capcol}{'subcollections'} } ) {
                push @members, $subcol;
                if ( !exists $parentcollection{$subcol} ) {
                    $parentcollection{$subcol} = [];
                }
                push @{ $parentcollection{$subcol} }, $capcol;
            }

            my @membersnoid;
            foreach my $member (@members) {
                push @membersnoid,
                  findCreateCollection( { slug => $member, nocreate => 1 } );
            }

            # Set the subcollections as members
            findCreateCollection(
                {
                    slug     => $capcol,
                    members  => \@membersnoid,
                    nocreate => 1
                }
            );
        }
        else {
            print "Subcollections field of $capcol not array!!\n"
              . Dumper( $capcol, $capcols{$capcol} );
        }
    }
}

# Include the parents of parents
my $changenothing;
until ($changenothing) {
    $changenothing = 1;
    foreach my $subcol ( keys %parentcollection ) {
        foreach my $parent ( @{ $parentcollection{$subcol} } ) {
            if ( exists $parentcollection{$parent} ) {
                my $lc = List::Compare->new( $parentcollection{$subcol},
                    $parentcollection{$parent} );
                my @toadd = $lc->get_Ronly;
                if (@toadd) {
                    push @{ $parentcollection{$subcol} }, @toadd;
                    $changenothing = 0;
                }
            }
        }
    }
}

# Clean up unused hash
undef %capcols;

# Clear the members field if asked
if ($clearmembers) {
    print "Clearing members field in series\n";
    foreach my $noid ( keys %collectionentries ) {

        # Ensure that members is empty, whether it doesn't exist or had entries
        if ( ( ref $collectionentries{$noid}{members} ne ref [] )
            || scalar( $collectionentries{$noid}{members} ) )
        {
            $collectionentries{$noid}{members} = [];
            $collectionentries{$noid}{updated} = 1;
        }
    }
}

if ( !$noseries ) {
    print "Add any missing series collections\n";
    foreach my $serieskey ( keys %seriesslugs ) {

        my $seriesnoid = findCreateCollection(
            {
                slug    => $serieskey,
                label   => $seriesslugs{$serieskey}->{label},
                ordered => 1
            }
        );

        # Remove unwanted parent slugs
        my @subtract;
        foreach my $colstring ( @{ $seriesslugs{$serieskey}{collections} } ) {
            if ( exists $parentcollection{$colstring} ) {
                my $lc = List::Compare->new(
                    $parentcollection{$colstring},
                    $seriesslugs{$serieskey}{collections}
                );
                push @subtract, $lc->get_intersection;
            }
        }
        if (@subtract) {
            my $lc = List::Compare->new( $seriesslugs{$serieskey}{collections},
                \@subtract );
            @{ $seriesslugs{$serieskey}{collections} } = $lc->get_Lonly;
        }

        # Find list of tag collections series is part of
        foreach my $colstring ( @{ $seriesslugs{$serieskey}{collections} } ) {
            findCreateCollection(
                {
                    slug     => $colstring,
                    nocreate => 1,
                    members  => [$seriesnoid]
                }
            );
        }

    }
}

print "initSlugFromNoid()\n" if $debug;

initSlugFromNoid();    # Ensure updated before doing later lookups

if ( !$nomanifests ) {
    print "Add any missing manifests to collections\n";

    foreach my $noid ( keys %collectionentries ) {
        my $entry = $collectionentries{$noid};
        my $slug  = getSlugFromNoid($noid);
        if ( !$slug ) {
            print "  $noid has no slug\n";
            next;
        }
        if ( $entry->{behavior} eq 'multi-part' ) {
            updateSeriesMembers($slug);
        }
        else {
            updateCollectionMembers($slug);
        }
    }
}

# Clean up unused hash
undef %seriesslugs;

# Post updates so far, before working on dmdSec
postUpdates();

if ($checktags) {
    checkTags();
}

if ( !$noupdatedmd ) {
    print "Updating DMD records\n";
    foreach my $noid ( keys %collectionentries ) {

# Unordered means it is not a series, and thus we don't have DMD in the repository.
        if ( $collectionentries{$noid}{behavior} eq 'multi-part' ) {
            updateDMD($noid);
        }
    }

    postUpdates();
}

if ($validate) {
    print "Validating records...\n";
    validateRecords();
}

### Helper functions

sub updateSeriesMembers {
    my ($slug) = @_;

    my $noid = getNoidFromSlug($slug);
    if ($noid) {
        my $colres = $internalmeta->get(
            "/"
              . $internalmeta->{database}
              . "/_design/tdr/_view/issues?reduce=false&include_docs=false&&startkey=[\"$slug\"]&endkey=[\"$slug\",{}]",
            {},
            { deserializer => 'application/json' }
        );
        if ( $colres->code != 200 ) {
            die "issues for startkey=$slug return code: "
              . $colres->code . "\n";
        }
        my @members;
        foreach my $member ( @{ $colres->data->{rows} } ) {
            my $approved   = $member->{value}->{approved};
            my $memberslug = $member->{id};
            my $membernoid = getNoidFromSlug($memberslug);
            if ($membernoid) {
                push @members, $membernoid;
            }
            else {
                if ($approved) {
                    print "  No noid for issue AIPID=$memberslug\n";
                }
                elsif ($debug) {
                    print "  No noid for unapproved issue AIPID=$memberslug\n";
                }
            }
        }
        findCreateCollection(
            {
                slug     => $slug,
                nocreate => 1,
                omembers => \@members
            }
        );
    }
    else {
        print "  No noid for series slug=$slug\n";
    }
}

sub getMemberSlugs {
    my ($slug) = @_;
    my @members;

    my $colres = $internalmeta->get(
        "/"
          . $internalmeta->{database}
          . "/_design/tdr/_view/collections?reduce=false&include_docs=false&key=\"$slug\"",
        {},
        { deserializer => 'application/json' }
    );
    if ( $colres->code != 200 ) {
        die "collections for key=$slug return code: " . $colres->code . "\n";
    }
    foreach my $member ( @{ $colres->data->{rows} } ) {
        push @members, $member->{id};
    }
    return @members;

}

sub updateCollectionMembers {
    my ($slug) = @_;

    my $noid = getNoidFromSlug($slug);
    if ($noid) {
        print "updateCollectionMembers slug=$slug noid=$noid\n";
        my $colres = $internalmeta->get(
            "/"
              . $internalmeta->{database}
              . "/_design/tdr/_view/collections?reduce=false&include_docs=false&key=\"$slug\"",
            {},
            { deserializer => 'application/json' }
        );
        if ( $colres->code != 200 ) {
            die "cotitles for startkey=$slug return code: "
              . $colres->code . "\n";
        }
        my @members;
        foreach my $member ( @{ $colres->data->{rows} } ) {
            my $memberslug = $member->{id};
            my $membernoid = getNoidFromSlug($memberslug);
            if ($membernoid) {
                push @members, $membernoid;
            }
            else {
                print "  No noid for collection member AIPID=$memberslug\n";
            }
        }
        findCreateCollection(
            {
                slug     => $slug,
                nocreate => 1,
                members  => \@members
            }
        );
    }
    else {
        print "  No noid for collection slug=$slug\n";
    }
}

sub updateDMD {
    my ($noid) = @_;

    my $slug = getSlugFromNoid($noid);
    if ( !$slug ) {
        print "Couldn't find slug for $noid in updateDMD\n";

        # Transition/testing -- delete outdated/invalid entry
        $collectionentries{$noid}{'_deleted'} = JSON::true;
        $collectionentries{$noid}{updated} = 1;

        #print "updateDMD $noid\n" if ($debug);
        return;
    }

    my $xml = XML::LibXML->new->parse_string( get_metadata($slug) );
    my $xpc = XML::LibXML::XPathContext->new;

# Find the "physical" structMap (the only one that is in our current repository)
    my @nodes =
      $xpc->findnodes( "descendant::mets:structMap[\@TYPE=\"physical\"]",
        $xml );
    if ( scalar(@nodes) != 1 ) {
        die "Found "
          . scalar(@nodes)
          . " structMap(TYPE=physical) for noid=$noid\n";
    }
    my @divs = $xpc->findnodes( 'descendant::mets:div', $nodes[0] );
    if ( scalar(@divs) != 1 ) {
        die "Found " . scalar(@divs) . " descendents for noid=$noid\n";
    }
    my $dmdid = $divs[0]->getAttribute('DMDID');
    if ( !$dmdid ) {
        die "Missing DMDID for noid=$noid\n";
    }
    my @dmdsec =
      $xpc->findnodes( "descendant::mets:dmdSec[\@ID=\"$dmdid\"]", $xml );
    if ( scalar(@dmdsec) != 1 ) {
        die "Found " . scalar(@dmdsec) . " dmdSec for ID=$dmdid\n";
    }
    my @md = $dmdsec[0]->nonBlankChildNodes();
    if ( scalar(@md) != 1 ) {
        die "Found " . scalar(@md) . " children for dmdSec ID=$dmdid\n";
    }
    my @types = split( /:/, $md[0]->nodeName );
    my $type = pop(@types);
    if ( $type ne 'mdWrap' ) {
        die "Found dmdSec child type $type, and we only support 'mdWrap'";
    }
    my $mdtype = $md[0]->getAttribute('MDTYPE');
    if ( $mdtype eq 'OTHER' ) {
        $mdtype = $md[0]->getAttribute('OTHERMDTYPE');
    }
    my @mdrecords = $md[0]->nonBlankChildNodes();
    if ( scalar(@mdrecords) != 1 ) {
        die "Found "
          . scalar(@mdrecords)
          . " child dmdSec xmlData in ID=$dmdid\n";
    }
    my @records = $mdrecords[0]->nonBlankChildNodes();
    if ( scalar(@records) != 1 ) {
        die "Found "
          . scalar(@records)
          . " child dmdSec records in ID=$dmdid\n";
    }
    my $xmlrecord = $records[0]->toString(0);
    my $dmdRecord =
      utf8::is_utf8($xmlrecord) ? Encode::encode_utf8($xmlrecord) : $xmlrecord;
    my $dmdDigest = md5_hex($dmdRecord);

    my $mdtypel = lc($mdtype);
    if ( ( !defined $collectionentries{$noid}{dmdType} )
        || $collectionentries{$noid}{dmdType} ne $mdtypel )
    {
        #print "mdtype updated $noid\n"
        #  . Dumper( $collectionentries{$noid}{dmdType}, $mdtypel )
        #  if ($debug);
        $collectionentries{$noid}{dmdType} = $mdtypel;
        $collectionentries{$noid}{updated} = 1;
    }

    my $object = "$noid/dmd$mdtype.xml";
    my $r = $swift->object_head( $access_metadata, $object );
    if ( $r->code == 404 || ( $r->etag ne $dmdDigest ) ) {
        print "Put $object\n";
        $r = $swift->object_put( $access_metadata, $object, $dmdRecord );
        if ( $r->code != 201 ) {
            warn "Failed writing $object - returned " . $r->code . "\n";
        }
    }
    elsif ( $r->code != 200 ) {
        warn "Head for $object - returned " . $r->code . "\n";
    }

}

sub get_metadata {
    my ($aipid) = @_;

    # Will retry 3 times.
    my $count = 3;

    my $object = $aipid . "/data/sip/data/metadata.xml";
    while ( $count-- ) {
        my $r = $swift->object_get( $preservation_files, $object );
        if ( $r->code == 200 ) {
            return $r->content;
        }
        elsif ( $r->code == 599 ) {
            warn( "Accessing $object returned code: " . $r->code . "\n" );
        }
        else {
            die( "Accessing $object returned code: " . $r->code . "\n" );
        }
    }
}

sub postUpdates {

    # Post updates
    my $dbupdate = { docs => [] };

    foreach my $noidkey ( keys %collectionentries ) {
        my $entry = $collectionentries{$noidkey};

        if ( !( keys %{ $entry->{label} } ) ) {
            my $slug = getSlugFromNoid($noidkey);
            if ( !$slug ) {
                $slug = "[unknown]";
            }
            print "No label for $noidkey slug=$slug\n";
        }

        if ( $entry->{updated} ) {
            delete $entry->{updated};
            $entry->{'_id'} = $noidkey;
            validateRecord( 'access', $entry )
              ;    # Always validate records being added or updated.
            push @{ $dbupdate->{docs} }, $entry;
        }
    }

    if ($nopost) {
        print "Would have posted "
          . scalar( @{ $dbupdate->{docs} } )
          . " collection updates.\n";
        return;
    }

    print "Posting "
      . scalar( @{ $dbupdate->{docs} } )
      . " collection updates.\n";

    $accessdb->type("application/json");
    my $res = $accessdb->post( "/" . $accessdb->database . "/_bulk_docs",
        $dbupdate, { deserializer => 'application/json' } );
    if ( $res->code != 201 ) {
        if ( defined $res->response->content ) {
            warn $res->response->content . "\n";
        }
        die "dbupdate of 'collection' return code: " . $res->code . "\n";
    }
}

sub isLabelEqual {
    my ( $oldlabel, $newlabel ) = @_;

    # First compare keys
    return 0
      if (
        join( "\0", sort( keys %{$oldlabel} ) ) ne
        join( "\0", sort( keys %{$newlabel} ) ) );

# For now, if keys are the same we'll consider equal as we don't expect to need to handle the strings changing.
    return 1;
}

sub findCreateCollection {
    my ($args) = @_;

    die "Slug mandatory for findCreateCollection()\n"
      if !exists $args->{slug};
    my $slug = $args->{slug};

    my $noid = getNoidFromSlug($slug);
    if ( !$noid ) {

        # If we've been asked not to create, then just exit without modification
        if ( $args->{nocreate} ) {
            return;
        }

        # Assign the newly minted noid
        $noid = getCollectionNoid();
    }

    if (  !( defined $collectionentries{$noid}{type} )
        || ( $collectionentries{$noid}{type} ne 'collection' ) )
    {
        $collectionentries{$noid}{type}    = 'collection';
        $collectionentries{$noid}{updated} = 1;
    }

    if (  !( defined $collectionentries{$noid}{slug} )
        || ( $collectionentries{$noid}{slug} ne $slug ) )
    {
        $collectionentries{$noid}{slug}    = $slug;
        $collectionentries{$noid}{updated} = 1;
        $noidfromslug{$slug}               = $noid;
    }

    # Clear old entry if exists
    if ( exists $collectionentries{$noid}{collections} ) {
        delete $collectionentries{$noid}{collections};
        $collectionentries{$noid}{updated} = 1;

        #print " delete $noid {collections} \n" if ($debug);
    }

    # Ensure that members is at least empty
    if ( ref $collectionentries{$noid}{members} ne ref [] ) {
        $collectionentries{$noid}{members} = [];
        $collectionentries{$noid}{updated} = 1;
    }

    # Appending primarily used for unordered collections
    if ( exists $args->{members} ) {

        # Append any missing members
        my @members = idToList( @{ $collectionentries{$noid}{members} } );
        my $lc      = List::Compare->new( $args->{members}, \@members );
        my @toadd   = $lc->get_Lonly;
        if (@toadd) {
            push @{ $collectionentries{$noid}{members} }, listToId(@toadd);
            $collectionentries{$noid}{updated} = 1;
        }
    }

    # Replacing used for multi-part collections.
    if ( exists $args->{omembers} ) {

        my @members = idToList( @{ $collectionentries{$noid}{members} } );
        my $lc = List::Compare->new( $args->{omembers}, \@members );

        # This is equivalent, not equal
        if ( !( $lc->is_LequivalentR() ) ) {

          # omembers replaces members (as they are assumed ordered and complete)
            @{ $collectionentries{$noid}{members} } =
              listToId( @{ $args->{omembers} } );

            $collectionentries{$noid}{updated} = 1;
        }
    }

    if ( ref $collectionentries{$noid}{label} ne ref {} ) {
        $collectionentries{$noid}{label}   = {};
        $collectionentries{$noid}{updated} = 1;

        #print "Set {} label on $noid\n" if ($debug);
    }
    if ( defined $args->{label}
        && ( !isLabelEqual( $collectionentries{$noid}{label}, $args->{label} ) )
      )
    {
        $collectionentries{$noid}{label}   = $args->{label};
        $collectionentries{$noid}{updated} = 1;

        #print "Set label for $noid\n" if ($debug);
    }

    if ( exists $args->{ordered} ) {
        if (
            ( $args->{ordered} )
            && (  !( defined $collectionentries{$noid}{behavior} )
                || ( $collectionentries{$noid}{behavior} ne 'multi-part' ) )
          )
        {
            $collectionentries{$noid}{behavior} = 'multi-part';
            $collectionentries{$noid}{updated}  = 1;

            #print "Set ordered for $noid\n" if ($debug);
        }
        if (
            !( $args->{ordered} )
            && (  !( defined $collectionentries{$noid}{behavior} )
                || ( $collectionentries{$noid}{behavior} ne 'unordered' ) )
          )
        {
            $collectionentries{$noid}{behavior} = 'unordered';
            $collectionentries{$noid}{updated}  = 1;

            #print "Set unordered for $noid\n" if ($debug);
        }
    }

    return $noid;
}

# Hitting the server too hard was causing 500 errors
sub getCollectionNoid {
    if ( !@colNoids ) {
        my $res = $noidsrv->post( "/mint/100/collection", {},
            { deserializer => 'application/json' } );
        if ( $res->code != 200 ) {
            die "Fail communicating with noid server: " . $res->code . "\n";
        }
        push @colNoids, @{ $res->data->{ids} };
    }
    return pop @colNoids;
}

sub getNoidFromSlug {
    my ($slug) = @_;

    return $noidfromslug{$slug};
}

#  Hash must be initialized whenever updates made to slugentries
sub initSlugFromNoid {
    %slugfromnoid = map { $noidfromslug{$_} => $_; } keys %noidfromslug;
}

sub getSlugFromNoid {
    my ($noid) = @_;

    return $slugfromnoid{$noid};
}

sub validateRecords {
    foreach my $noidkey ( keys %collectionentries ) {
        validateRecord( 'access', $collectionentries{$noidkey} );
    }
}

sub validateRecord {
    my ( $database, $record ) = @_;

    my $error = CIHM::Meta::Kivik::validateRecord( $database, $record );

    if ($error) {
        my $slug = getSlugFromNoid( $record->{'_id'} );
        print "Validation failure for database=$database slug=$slug :\n"
          . Data::Dumper->Dump( [ $record, $error ], [qw(Record Error)] )
          . "\n";
    }
}

sub checkTags {

    print "Checking tags...\n";

    # Hash of tags (keys are tags).
    my %tags;

    $internalmeta->type("application/json");
    $res = $internalmeta->get(
        "/"
          . $internalmeta->{database}
          . "/_design/tdr/_view/colpages?reduce=true&group_level=1",
        {},
        { deserializer => 'application/json' }
    );
    if ( $res->code != 200 ) {
        die "colpages return code: " . $res->code . "\n";
    }
    foreach my $thistag ( @{ $res->data->{rows} } ) {
        $tags{ $thistag->{key} } = 1;
    }
    $res = $internalmeta->get(
        "/"
          . $internalmeta->{database}
          . "/_design/tdr/_view/coltitles?reduce=true&group_level=1",
        {},
        { deserializer => 'application/json' }
    );
    if ( $res->code != 200 ) {
        die "coltitles return code: " . $res->code . "\n";
    }
    foreach my $thistag ( @{ $res->data->{rows} } ) {
        $tags{ $thistag->{key} } = 1;
    }

    delete $tags{'[none]'};

    my @missing;
    foreach my $thistag ( keys %tags ) {
        if ( !getNoidFromSlug($thistag) ) {
            push @missing, $thistag;
        }
    }

    if (@missing) {
        print "The following tags are missing from collections: "
          . join( ' , ', @missing ) . "\n";
    }
    else {
        print "No missing tag collection\n";
    }
}

sub listToId {
    my @idlist;
    foreach (@_) {
        push @idlist, { id => $_ };
    }
    return @idlist;
}

sub idToList {
    my @list;
    foreach (@_) {
        push @list, $_->{id};
    }
    return @list;
}
