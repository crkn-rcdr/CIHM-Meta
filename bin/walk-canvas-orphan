#!/usr/bin/env perl

use strict;
use utf8;
use warnings;
use Getopt::Long;
use Config::General;
use CIHM::Meta::REST::manifest;
use CIHM::Meta::REST::canvas;
use URI::Escape;
use Data::Dumper;

my $conf = "/etc/canadiana/tdr/tdr.conf";
my $limit = 10000;
GetOptions (
    'conf=s' => \$conf,
	'limit=i' => \$limit
    );

my %confighash = new Config::General(
    -ConfigFile => $conf,
    )->getall;


# Undefined if no <manifest> config block
my $manifestdb;
if (exists $confighash{manifest}) {
    $manifestdb = new CIHM::Meta::REST::manifest (
		server => $confighash{manifest}{server},
		database => $confighash{manifest}{database},
		type   => 'application/json',
		conf   => $conf,
		clientattrs => {timeout => 36000},
	);
} else {
    die "Missing <manifest> configuration block in config\n";
}

# Undefined if no <canvas> config block
my $canvasdb;
if (exists $confighash{canvas}) {
    $canvasdb = new CIHM::Meta::REST::canvas (
		server => $confighash{canvas}{server},
		database => $confighash{canvas}{database},
		type   => 'application/json',
		conf   => $conf,
		clientattrs => {timeout => 36000},
	);
} else {
    die "Missing <canvas> configuration block in config\n";
}


$canvasdb->type("application/json");
$manifestdb->type("application/json");


my $count=1;
my $startkey;
#='69429/c0zw18m1889f';
while ($count) {
	my $request="/".$canvasdb->{database}."/_all_docs?include_docs=true".
		($startkey ? "&startkey=\"".uri_escape_utf8($startkey)."\"":"") . "&limit=$limit";
	my $res = $canvasdb->get($request, {}, {deserializer => 'application/json'});
	if ($res->code != 200) {
		die "CouchDB: \"$request\" return code: " . $res->code . "\n";
	}
	my $rows=$res->data->{rows};
	$count = scalar @{$rows};
	print "Count: $count\n";
	if ($count >0) {
		my @updates;
		my $firstkey=$rows->[0]->{'id'};
		my $lastcount;
		if ($count > 1) {
			$lastcount=$count-2;
			$startkey=$rows->[$count-1]->{'id'};
		} else {
			# Do the last one
			$count=0;
			$lastcount=0;
		}
		my @canvaskeys;
		for my $i (0..$lastcount) {
			push @canvaskeys, $rows->[$i]->{'id'}
		}
		my $requestman="/".$manifestdb->{database}."/_design/access/_view/canvasnoids";
		my $resman = $manifestdb->post($requestman,
			{ 
				keys => \@canvaskeys
			}, {deserializer => 'application/json'});
		if ($resman->code != 200) {
			die "CouchDB: \"$requestman\" return code: " . $resman->code . "\n";
		}
		# Create hash from found entries
		my %canvasfound = map {
			$_->{key} => 1
		} @{$resman->data->{rows}};
		for my $i (0..$lastcount) {
			my $doc=$rows->[$i]->{doc};
			my $id=$doc->{'_id'};
			my $orphan= ! exists $canvasfound{$id};
			# Is orphan, but not currently set
			if ($orphan && ( ! (exists $doc->{orphan}) || ! ($doc->{orphan}))) {
				print "$id is orphan, and needs updating\n";
				$doc->{orphan}=JSON::true;
				push @updates, $doc;
			}
			if (!$orphan && exists $doc->{orphan} && $doc->{orphan}) {
				print "$id not orphan, and needs updating\n";
				$doc->{orphan}=JSON::false;
				push @updates, $doc;
			}
		}

		if (@updates) {
			my $res = $canvasdb->post("/".$canvasdb->database."/_bulk_docs", { docs => \@updates }, {deserializer => 'application/json'});
			if ($res->code != 201) {
				if (defined $res->response->content) {
					warn $res->response->content."\n";
				}
               	die "dbupdate of 'canvas' return code: " . $res->code . "\n";
    		}
		}
		my $lastkey=$rows->[$lastcount]->{'id'};
		print "FirstKey: $firstkey LastKey: $lastkey StartKey: $startkey \n";
	} 
}
